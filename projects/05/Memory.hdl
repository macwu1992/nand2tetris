// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    And(a=address[13], b=true, out=isAddress13True);
    And(a=address[14], b=true, out=isAddress14True);

    Or8Way(in=address[0..7], out=tmpOrAddr1);
    Or8Way(in[0..4]=address[8..12], out=tmpOrAddr2);
    Or(a=tmpOrAddr1, b=tmpOrAddr2, out=tmpOrAddr3);

    And(a=isAddress14True, b=isAddress13True, out=isAddressHigh);
    And(a=isAddressHigh, b=tmpOrAddr3, out=isAddrExceeded);

    Mux16(a=in, b=false, sel=isAddrExceeded, out=tmpIn);
    Mux(a=load, b=false, sel=isAddrExceeded, out=tmpLoad);

    DMux4Way(in=true, sel[0]=isAddress13True, sel[1]=isAddress14True, a=isData1, b=isData2, c=isScreen, d=isKeyBoard);
    Or(a=isData1, b=isData2, out=isData);

    And(a=tmpLoad, b=isData, out=dataLoad);

    RAM16K(in=tmpIn, load=dataLoad, address[0..13]=address[0..13], out=data);

    DMux(in=isScreen, sel=address[12], a=screenTmpLoadLowTag, b=screenTmpLoadHighTag);

    Mux16(a=false, b=tmpIn, sel=screenTmpLoadLowTag, out=screenTmpInLow);
    Mux16(a=false, b=tmpIn, sel=screenTmpLoadHighTag, out=screenTmpInHigh);

    And(a=tmpLoad, b=isScreen, out=screenLoad);

    RAM4K(in=screenTmpInLow, load=screenLoad, address=address[0..11], out=screen1);
    RAM4K(in=screenTmpInHigh, load=screenLoad, address=address[0..11], out=screen2);
    Mux16(a=screen1, b=screen2, sel=screenTmpLoadHighTag, out=screen);

    Keyboard(out=keyOut);

    And(a=tmpLoad, b=isKeyBoard, out=keyboardLoad);

    Mux16(a=false, b=keyOut, sel=isKeyBoard, out=keyIn);
    RAM8(in=keyIn, load=keyboardLoad, address=false, out=key);

    Mux4Way16(a=data, b=data, c=screen, d=key, sel[0]=isAddress13True, sel[1]=isAddress14True, out=tmpOut);
    Mux16(a=tmpOut, b=false, sel=isAddrExceeded, out=out);
}