// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Not(in=instruction[15], out=isAInstruction);

    Mux16(a=outALU, b[0..14]=instruction[0..14], sel=isAInstruction, out=inAReg);

    // A Register
    Mux(a=isAInstruction, b=instruction[5], sel=instruction[15], out=loadA);

    ARegister(in=inAReg, load=loadA, out=outAReg, out[0..14]=addressM);

    Mux16(a=outAReg, b=inM, sel=instruction[12], out=outAOrM);

    // D Register
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=outALU, load=loadD, out=outDReg);

    // ALU
    ALU(x=outDReg, y=outAOrM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], zr=outALUZr, ng=outALUNg, out=outM, out=outALU);

    And(a=instruction[3], b=instruction[15], out=writeM);

    Or(a=instruction[0], b=instruction[1], out=OrJumpBitTmp1);
    Or(a=OrJumpBitTmp1, b=instruction[2], out=OrJumpBit2);
    And(a=OrJumpBit2, b=instruction[15], out=OrJumpBit);
    DMux8Way(in=true, sel=instruction[0..2], a=NULL, b=tmpJGT, c=tmpJEQ, d=tmpJGE, e=tmpJLT, f=tmpJNE, g=tmpJLE, h=JMP);

    Not(in=NULL, out=notNULL);
    Not(in=outALUNg, out=notOutALUNg);
    Not(in=outALUZr, out=notOutALUZr);

    And(a=notOutALUNg, b=notOutALUZr, out=isPositive);
    Or(a=outALUNg, b=outALUZr, out=isNgOrZero);

    And(a=tmpJGT, b=isPositive, out=JGT);
    And(a=tmpJEQ, b=outALUZr, out=JEQ);
    And(a=tmpJGE, b=notOutALUNg, out=JGE);
    And(a=tmpJLT, b=outALUNg, out=JLT);
    And(a=tmpJNE, b=notOutALUZr, out=JNE);
    And(a=tmpJLE, b=isNgOrZero, out=JLE);

    Or8Way(in[0]=NULL, in[1]=JGT, in[2]=JEQ, in[3]=JGE, in[4]=JLT, in[5]=JNE, in[6]=JLE, in[7]=JMP, out=ifJumpTmp1);

    And(a=instruction[15], b=ifJumpTmp1, out=ifJumpTmp2);
    And(a=notNULL, b=ifJumpTmp2, out=ifJump);

    PC(in=outAReg, load=ifJump, inc=true, reset=reset, out=outPC, out[0..14]=pc);
}